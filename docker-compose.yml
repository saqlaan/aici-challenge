version: '3.8'

services:
  # Database
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-multiple-db.sql:/docker-entrypoint-initdb.d/init-multiple-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user"]
      interval: 10s
      timeout: 5s
      retries: 5

  # User Service
  user-service:
    build:
      context: ./packages/user-service
      dockerfile: Dockerfile
    ports:
      - "4000:4000"
    env_file:
      - ./packages/user-service/.env
    environment:
      - NODE_ENV=development
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./packages/user-service:/app
      - /app/node_modules
    working_dir: /app
    command: npm run dev
    restart: unless-stopped

  # Todo Service
  todo-service:
    build:
      context: ./packages/todo-service
      dockerfile: Dockerfile
    ports:
      - "4001:4001"
    env_file:
      - ./packages/todo-service/.env
    environment:
      - NODE_ENV=development
    depends_on:
      - postgres
      - user-service
    volumes:
      - ./packages/todo-service:/app
      - /app/node_modules
    working_dir: /app
    command: npm run dev
    restart: unless-stopped

  # Frontend App
  frontend:
    build:
      context: ./packages/app
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    env_file:
      - .env
    environment:
      - NODE_ENV=development
    depends_on:
      - user-service
      - todo-service
    volumes:
      - ./packages/app:/app
      - /app/node_modules
      - /app/.next
    working_dir: /app
    command: npm run dev
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  default:
    name: aici-challenge-network
